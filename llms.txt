# Tagged Error - Guide for LLMs

## Overview
Tagged Error is a TypeScript library that provides type-safe error handling without requiring custom error classes. It allows for structured, tagged errors with optional context data.

## Core Concepts
- `TaggedError` is the main class that extends JavaScript's native Error
- Each error has a string `tag` that identifies the error type
- Errors can include optional `message` and `cause` data
- Type-safe error handling is achieved through TypeScript's type system

## Basic Usage Pattern

1. **Creating errors**:
   ```typescript
   return new TaggedError("ERROR_TAG", {
     message: "Human-readable error message",
     cause: { /* optional context data */ }
   });
   ```

2. **Handling errors**:
   ```typescript
   const result = someFunction();
   
   if (result instanceof TaggedError) {
     switch (result.tag) {
       case "ERROR_TAG_1":
         // Handle specific error type
         break;
       case "ERROR_TAG_2":
         // Access cause data if available
         console.log(result.cause.someProperty);
         break;
     }
   } else {
     // Handle success case
   }
   ```

## Type Parameters
- `Tag extends string`: The literal string type of the error tag
- `Cause = undefined`: The type of the cause data (optional)

## Constructor
```typescript
new TaggedError(tag: Tag, options?: {
  message?: string;
  cause?: Cause;
})
```

## Properties
- `tag`: String identifier for the error type
- `message`: Human-readable error description
- `cause`: Additional context data
- `name`: Automatically set to `TaggedError('${tag}')`

## Best Practices
1. Use UPPERCASE_SNAKE_CASE for error tags
2. Return the TaggedError directly from functions rather than throwing
3. Use discriminated union pattern with switch statements for type-safe handling
4. Include relevant context data in the cause property

## Example: Function with Multiple Error Types
```typescript
function divideAndSquareRoot(num: number, divisor: number) {
  if (divisor === 0) {
    return new TaggedError("DIVISOR_IS_ZERO", {
      message: "Cannot divide by zero",
    });
  }

  const result = num / divisor;

  if (result < 0) {
    return new TaggedError("NEGATIVE_RESULT", {
      message: "Cannot calculate square root of negative number",
      cause: { value: result },
    });
  }

  return Math.sqrt(result);
}

// Using the function
const result = divideAndSquareRoot(10, 0);

if (result instanceof TaggedError) {
  switch (result.tag) {
    case "DIVISOR_IS_ZERO":
      console.error("Division by zero error:", result.message);
      break;
    case "NEGATIVE_RESULT":
      console.error(
        "Negative result error:",
        result.message,
        "Value:",
        result.cause.value,
      );
      break;
  }
} else {
  console.log("Result:", result); // result is typed as number
}
```

## Advantages Over Traditional Error Handling
- No need to create multiple error classes
- Type-safe error handling with TypeScript
- Clear, structured error information
- Lightweight with zero dependencies
